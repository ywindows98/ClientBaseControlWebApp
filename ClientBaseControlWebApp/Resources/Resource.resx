<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountingNav" xml:space="preserve">
    <value>Accounting</value>
  </data>
  <data name="AddMaterialToProcedure" xml:space="preserve">
    <value>Add this material to a procedure</value>
  </data>
  <data name="AddNewClient" xml:space="preserve">
    <value>Add a new client</value>
  </data>
  <data name="AddNewMaterial" xml:space="preserve">
    <value>Add a new material</value>
  </data>
  <data name="AddProcedureRecord" xml:space="preserve">
    <value>Add a new procedure record</value>
  </data>
  <data name="AddProcedureType" xml:space="preserve">
    <value>Add a new procedure type</value>
  </data>
  <data name="Allergy" xml:space="preserve">
    <value>Allergy</value>
  </data>
  <data name="AmountLabel" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="Appearance" xml:space="preserve">
    <value>Appearance</value>
  </data>
  <data name="BlackHairColor" xml:space="preserve">
    <value>Black</value>
  </data>
  <data name="BlondeHairColor" xml:space="preserve">
    <value>Blonde</value>
  </data>
  <data name="BlueColor" xml:space="preserve">
    <value>Blue</value>
  </data>
  <data name="BrownColor" xml:space="preserve">
    <value>Brown</value>
  </data>
  <data name="BrownHairColor" xml:space="preserve">
    <value>Brown</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Capillaries" xml:space="preserve">
    <value>Capillaries</value>
  </data>
  <data name="ChangeProcedure" xml:space="preserve">
    <value>Change procedure</value>
  </data>
  <data name="ChooseClientLabel" xml:space="preserve">
    <value>Client</value>
  </data>
  <data name="ChooseMaterial" xml:space="preserve">
    <value>Choose a material</value>
  </data>
  <data name="ChooseSelection" xml:space="preserve">
    <value>Choose</value>
  </data>
  <data name="CirclesUnderEyesColor" xml:space="preserve">
    <value>Circles under the eyes color</value>
  </data>
  <data name="ClientAllergiesLabel" xml:space="preserve">
    <value>Allergies</value>
  </data>
  <data name="ClientBirthdayLabel" xml:space="preserve">
    <value>Birthday</value>
  </data>
  <data name="ClientDeleteConfirmation" xml:space="preserve">
    <value>Do you really want to delete this client?</value>
  </data>
  <data name="ClientEmailLabel" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="ClientIndicationColorLabel" xml:space="preserve">
    <value>Indication color</value>
  </data>
  <data name="ClientInitialNoteLabel" xml:space="preserve">
    <value>Initial note</value>
  </data>
  <data name="ClientMainNoteLabel" xml:space="preserve">
    <value>Main note</value>
  </data>
  <data name="ClientNameLabel" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ClientNumberOfProceduresLabel" xml:space="preserve">
    <value>Number of procedures</value>
  </data>
  <data name="ClientPhoneNumberLabel" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="ClientsNav" xml:space="preserve">
    <value>Clients</value>
  </data>
  <data name="ClientSurnameLabel" xml:space="preserve">
    <value>Surname</value>
  </data>
  <data name="ColdPinkShade" xml:space="preserve">
    <value>Cold pink</value>
  </data>
  <data name="CommentLabel" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="ConfigurationNav" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="DateLabel" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DeleteButton" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DescriptionLabel" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DetailsButton" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="DocumentsNav" xml:space="preserve">
    <value>Documents</value>
  </data>
  <data name="DoesNotHave" xml:space="preserve">
    <value>Does`t have</value>
  </data>
  <data name="DrySkin" xml:space="preserve">
    <value>Dry skin</value>
  </data>
  <data name="EditButton" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditClient" xml:space="preserve">
    <value>Edit client data</value>
  </data>
  <data name="EditMaterial" xml:space="preserve">
    <value>Edit the material</value>
  </data>
  <data name="EmployeesNav" xml:space="preserve">
    <value>Employees</value>
  </data>
  <data name="EyeColor" xml:space="preserve">
    <value>Eye color</value>
  </data>
  <data name="FatSkin" xml:space="preserve">
    <value>Fat skin</value>
  </data>
  <data name="FieldIsRequired" xml:space="preserve">
    <value>This field is required</value>
  </data>
  <data name="For" xml:space="preserve">
    <value>for</value>
  </data>
  <data name="GingerHairColor" xml:space="preserve">
    <value>Ginger</value>
  </data>
  <data name="GrayColor" xml:space="preserve">
    <value>Gray</value>
  </data>
  <data name="GrayHairColor" xml:space="preserve">
    <value>Gray</value>
  </data>
  <data name="GreenColor" xml:space="preserve">
    <value>Green</value>
  </data>
  <data name="HairColor" xml:space="preserve">
    <value>Hair color</value>
  </data>
  <data name="Has" xml:space="preserve">
    <value>Has</value>
  </data>
  <data name="HasAllergyLabel" xml:space="preserve">
    <value>Has allergy?</value>
  </data>
  <data name="HasAllergyWarning" xml:space="preserve">
    <value>Client has allergy!</value>
  </data>
  <data name="HasCapillaries" xml:space="preserve">
    <value>Capillaries</value>
  </data>
  <data name="HasTan" xml:space="preserve">
    <value>Tan</value>
  </data>
  <data name="HistoryOfProcedures" xml:space="preserve">
    <value>History of procedures</value>
  </data>
  <data name="LightBlueColor" xml:space="preserve">
    <value>Light blue</value>
  </data>
  <data name="LightBrownHairColor" xml:space="preserve">
    <value>Light brown</value>
  </data>
  <data name="LightGreenColor" xml:space="preserve">
    <value>Light green</value>
  </data>
  <data name="LoginNav" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LoginRequest" xml:space="preserve">
    <value>Please log in to continue</value>
  </data>
  <data name="LogoutNav" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="MaterialAlreadyAdded" xml:space="preserve">
    <value>This material has already been added to the procudeure</value>
  </data>
  <data name="MaterialDeleteConfirmation" xml:space="preserve">
    <value>Do you really want to delete this material?</value>
  </data>
  <data name="MaterialNeedle" xml:space="preserve">
    <value>Needle</value>
  </data>
  <data name="MaterialOther" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="MaterialPigment" xml:space="preserve">
    <value>Pigment</value>
  </data>
  <data name="MaterialsNav" xml:space="preserve">
    <value>Materials</value>
  </data>
  <data name="MaterialTypeLabel" xml:space="preserve">
    <value>Material type</value>
  </data>
  <data name="MembraneColor" xml:space="preserve">
    <value>Membrane color</value>
  </data>
  <data name="MgUnit" xml:space="preserve">
    <value>mg</value>
  </data>
  <data name="MlUnit" xml:space="preserve">
    <value>ml</value>
  </data>
  <data name="NameLabel" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NeedleType" xml:space="preserve">
    <value>Needle type</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NoAllergy" xml:space="preserve">
    <value>Allergies were not mentioned</value>
  </data>
  <data name="NoDescription" xml:space="preserve">
    <value>Item has no description</value>
  </data>
  <data name="NormalSkin" xml:space="preserve">
    <value>Normal skin</value>
  </data>
  <data name="NotChosen" xml:space="preserve">
    <value>Not chosen</value>
  </data>
  <data name="NoteLabel" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="PiecesUnit" xml:space="preserve">
    <value>pcs</value>
  </data>
  <data name="ProcedureRecordsNav" xml:space="preserve">
    <value>Procedure records</value>
  </data>
  <data name="ProceduresNav" xml:space="preserve">
    <value>Procedures</value>
  </data>
  <data name="ProcedureTypeDeleteConfirmation" xml:space="preserve">
    <value>Do you want to delete this procedure type?</value>
  </data>
  <data name="ProcedureTypeLabel" xml:space="preserve">
    <value>ProcedureType</value>
  </data>
  <data name="ProcedureTypesNav" xml:space="preserve">
    <value>Procedure types</value>
  </data>
  <data name="RedColor" xml:space="preserve">
    <value>Red</value>
  </data>
  <data name="RegisterNav" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="ResetButton" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="ReturnBack" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="SaveButton" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SearchBar" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SelectedMaterials" xml:space="preserve">
    <value>Selected materials</value>
  </data>
  <data name="ShowAllButton" xml:space="preserve">
    <value>Show all</value>
  </data>
  <data name="SkinType" xml:space="preserve">
    <value>Skin type</value>
  </data>
  <data name="Tan" xml:space="preserve">
    <value>Tan</value>
  </data>
  <data name="UnitsOfMeasurementLabel" xml:space="preserve">
    <value>Unit of measurement</value>
  </data>
  <data name="WarmPinkShade" xml:space="preserve">
    <value>Warm pink</value>
  </data>
  <data name="YellowColor" xml:space="preserve">
    <value>Yellow</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>